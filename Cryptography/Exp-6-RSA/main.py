import gmpy2

from math import ceil
from gmpy2 import mpz, isqrt


def factoring_1(N):
    A, r = gmpy2.isqrt_rem(N)
    if r > 0:
        A += 1
    A_squared_minus_N = A**2 - N
    x = gmpy2.isqrt(A_squared_minus_N)
    p = A - x
    q = A + x
    N_slash = gmpy2.mul(p, q)
    assert N == N_slash
    return p, q


def factoring_2(N):
    N_sqrt, r = gmpy2.isqrt_rem(N)
    if r > 0:
        N_sqrt += 1
    for offset in range(2**20):
        A = N_sqrt + offset
        A_squared_minus_N = A**2 - N
        x = gmpy2.isqrt(A_squared_minus_N)
        p = A - x
        q = A + x
        if gmpy2.mul(p, q) == N:
            break
    return p, q


def decrypt(c, e, n):
    p, q = factoring_1(n)

    phi_n = gmpy2.mul(p - 1, q - 1)

    d = gmpy2.invert(e, phi_n)

    msg_hex = hex(gmpy2.powmod(c, d, n))[2:]

    if msg_hex[0] == '2':
        msg_hex = '0' + msg_hex

    msg = msg_hex.split('00')[1]

    return str(bytes.fromhex(msg))


def main() -> None:
    n1 = mpz('179769313486231590772930519078902473361797697894230657273430081157732675805505620686985379449212982959585501387537164015710139858647833778606925583497541085196591615128057575940752635007475935288710823649949940771895617054361149474865046711015101563940680527540071584560878577663743040086340742855278549092581')
    n2 = mpz('648455842808071669662824265346772278726343720706976263060439070378797308618081116462714015276061417569195587321840254520655424906719892428844841839353281972988531310511738648965962582821502504990264452100885281673303711142296421027840289307657458645233683357077834689715838646088239640236866252211790085787877')
    c = mpz('22096451867410381776306561134883418017410069787892831071731839143676135600120538004282329650473509424343946219751512256465839967942889460764542040581564748988013734864120452325229320176487916666402997509188729971690526083222067771600019329260870009579993724077458967773697817571267229951148662959627934791540')
    e = 0x10001

    print(factoring_2(n1))
    print(factoring_2(n2))

    print(decrypt(c, e, n1))


if __name__ == '__main__':
    main()
